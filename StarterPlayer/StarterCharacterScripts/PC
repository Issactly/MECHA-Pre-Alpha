--get current player
local players = game:GetService("Players") -- player things
local UserInputService = game:GetService("UserInputService") --keyboard/mouse inputs
local RunService = game:GetService("RunService") --anim loops
local Players = game:GetService("Players")

--wait for players av
local lp = players.LocalPlayer
local char = lp.Character or lp.CharacterAdded:Wait()

--acess to bod parts
local hum = char:WaitForChild("Humanoid") --nucelus of movement
local root = char:WaitForChild("HumanoidRootPart") --character center
local cam = workspace.CurrentCamera -- player cam
local torso = char:FindFirstChild("Torso") --bod anchor
local neck = torso:WaitForChild("Neck") --neck joint
local y = neck.C0.Y --og neck pos

--anims
local animator = hum:WaitForChild("Animator")
local runAnimation = Instance.new("Animation")
local walkAnimation = Instance.new("Animation")
local crouchPoseAnimation = Instance.new("Animation")
local crouchDownAnimation = Instance.new("Animation")

--set which anim to use
runAnimation.AnimationId = "rbxassetid://108999179774030"
walkAnimation.AnimationId = "rbxassetid://88782065952494"
crouchPoseAnimation.AnimationId = "rbxassetid://111160791127334"
crouchDownAnimation.AnimationId = "rbxassetid://72380389179373"
local walkTrack = animator:LoadAnimation(walkAnimation)
local runTrack = animator:LoadAnimation(runAnimation)
local crouchDownTrack = animator:LoadAnimation(crouchDownAnimation)
local crouchPoseTrack = animator:LoadAnimation(crouchPoseAnimation)
crouchPoseTrack.Looped=true
walkTrack.Looped=true
crouchDownTrack.Looped=false
runTrack.Looped=true

--if running or naw
local isRunning = false
local isShiftHeld = false
local isWHeld = false
local isCHeld = false
local isCrouching = false

--func for checking changes
local function updateRunningState()
	--if both are down then anim
	if isShiftHeld and isWHeld then
		hum.WalkSpeed = 30
		isRunning = true
		runTrack:Play()
		walkTrack:Stop()
		crouchPoseTrack:Stop()
		if isCrouching then
			hum.WalkSpeed = 7
			runTrack:Stop()
			walkTrack:Stop()
			crouchPoseTrack:Play()
		end
	elseif isCHeld then
		hum.WalkSpeed = 7
		isRunning = false
		runTrack:Stop()
		walkTrack:Stop()
		crouchDownTrack:Play()
		task.wait(.3)
		crouchPoseTrack:Play()
	else
		--default when not both or none
		hum.WalkSpeed = 16
		isRunning = false
		runTrack:Stop()
		crouchPoseTrack:Stop()
		crouchDownTrack:Stop()
		if isWHeld then
			walkTrack:Play()
		else walkTrack:Stop()
		end
	end
end

--track W key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if input.KeyCode == Enum.KeyCode.W then
		isWHeld = true
		updateRunningState()
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		isShiftHeld = true
		updateRunningState()
	elseif input.KeyCode == Enum.KeyCode.C then
		isCHeld = true
		isCrouching = true
		hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
		updateRunningState()
	end
end)

--track Lshift key
UserInputService.InputEnded:Connect(function(input, gameProcessed)
	if input.KeyCode == Enum.KeyCode.W then
		isWHeld = false
		updateRunningState()
	elseif input.KeyCode == Enum.KeyCode.LeftShift then
		isShiftHeld = false
		updateRunningState()
	elseif input.KeyCode == Enum.KeyCode.C then
		isCHeld = false
		isCrouching = false
		hum:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
		hum:ChangeState(Enum.HumanoidStateType.GettingUp)
		crouchPoseTrack:Stop()
		updateRunningState()
	end
end)



--head to cam movement
local headEvent = game:GetService("ReplicatedStorage"):WaitForChild("UpdateHeadCFrame")
local frameCounter = 0
local updateEveryXFrames = 7 --^morechoppy vlesschoppy

RunService.RenderStepped:Connect(function()
	frameCounter = frameCounter + 1
	if frameCounter % updateEveryXFrames == 0 then
		local camdirec = root.CFrame:ToObjectSpace(cam.CFrame).LookVector
		if neck then
			neck.C0 = CFrame.new(0,y,0) * CFrame.Angles(0,math.rad(180),0) * 
				CFrame.Angles(0,-camdirec.X,0) * CFrame.Angles(-camdirec.Y,0,0)
			neck.C0 = neck.C0 * CFrame.Angles(math.rad(-90),0,0)

			-- Changed this line:
			headEvent:FireServer(neck.C0)
		end
	end
end)
